- title: "vtable overwrite"
  questions:
  - text: "buffer[0]"
    single: true
    options:
    - "A. shellcode"
    - "B. address of buffer[0]"
    - "C. address of buffer[50]"
    - "D. address of original vtable"
    - "E. address of objArray[0]'s vtable"
    - "F. address of objArray[1]'s vtable pointer"
    - "G. something else"
  - text: "buffer[50]"
    single: true
    options:
    - "A. shellcode"
    - "B. address of buffer[0]"
    - "C. address of buffer[50]"
    - "D. address of original vtable"
    - "E. address of objArray[0]'s vtable"
    - "F. address of objArray[1]'s vtable pointer"
    - "G. something else"
  - text: "(overwritten by overflow) array[1]'s vtable pointer"
    single: true
    options:
    - "A. shellcode"
    - "B. address of buffer[0]"
    - "C. address of buffer[50]"
    - "D. address of original vtable"
    - "E. address of objArray[0]'s vtable"
    - "F. address of objArray[1]'s vtable pointer"
    - "G. something else"
- title: "guard page space overhead"
  questions:
  - text: "Overhead using for only objects >4096 bytes"
    single: true
    options:
    - "extra 0 to 500 KB"
    - "extra 500 KB to 1000 KB"
    - "extra 1000 KB to 5000 KB"
    - "extra 5000 KB to 10 000 KB"
    - "extra 10 000 KB to 50 000 KB"
    - "extra 50 000 KB to 100 000 KB"
    - "extra 100 000 KB to 500 000 KB"
    - "more than 500 000 KB"
  - text: "Overhead using for only objects >200 bytes"
    single: true
    options:
    - "extra 0 to 500 KB"
    - "extra 500 KB to 1000 KB"
    - "extra 1000 KB to 5000 KB"
    - "extra 5000 KB to 10 000 KB"
    - "extra 10 000 KB to 50 000 KB"
    - "extra 50 000 KB to 100 000 KB"
    - "extra 100 000 KB to 500 000 KB"
    - "more than 500 000 KB"
  - text: "Overhead using for all objects"
    single: true
    options:
    - "extra 0 to 500 KB"
    - "extra 500 KB to 1000 KB"
    - "extra 1000 KB to 5000 KB"
    - "extra 5000 KB to 10 000 KB"
    - "extra 10 000 KB to 50 000 KB"
    - "extra 50 000 KB to 100 000 KB"
    - "extra 100 000 KB to 500 000 KB"
    - "more than 500 000 KB"
- title: "subterfuge exercise"
  questions:
  - text: "STRING1"
    single: true
    options:
    - "(any 128 characters) followed by (hex bytes): DD CC BB AA"
    - "(any 128 characters) followed by (hex bytes): CD 5D BB AA (0xAABBCCDD + 128)"
    - "(any 128 characters) followed by (hex bytes): d0 3b 30 20 10 (0x1020304050 - 1024 - 128)"
    - "(any 128 characters) followed by (hex bytes): 50 3c 30 20 10 (0x1020304050 - 1024)"
    - "(any 128 characters) followed by (hex bytes): d0 3f 30 20 10 (0x1020304050 - 128)"
    - "(any 128 characters) followed by (hex bytes): 50 40 30 20 10 (0x1020304050)"
    - "(any 128 characters) followed by (hex bytes): d0 40 30 20 10 (0x1020304050 + 128)"
    - "(any 128 characters) followed by (hex bytes): d0 44 50 20 10 (0x1020304050 + 1024)"
    - "(hex bytes): 50 40 30 20 10 (0x1020304050)"
    - "something else"
  - text: "STRING2"
    single: true
    options:
    - "(hex bytes) DD CC BB AA"
    - "(hex bytes) CD 5D BB AA (0xAABBCCDD + 128)"
    - "(any 128 characters) followed by (hex bytes) DD BB CC AA"
    - "(any 128 characters) followed by (hex bytes) CD 5D BB AA (0xAABBCCDD + 128)"
    - "(any 1024 characters) followed by (hex bytes) DD BB CC AA"
    - "something else"
- title: "ROP exercise 0"
  questions:
  - text: "What should be written to the stack?"
    multiple: true
    options:
    - "0x100000 (return address), then 0x100100"
    - "0x100000, then 0x100200"
    - "0x100000, then 0x100300"
    - "0x100100, then 0x100000"
    - "0x100200, then 0x100000"
    - "0x100300, then 0x100000"
    - "0x100000, then 0x0, then 0x100300"
    - "0x100100, then 0x0, then 0x100000"
    - "0x100200, then 0x0, then 0x100000"
    - "0x100300, then 0x0, then 0x100000"
- title: "ROP exercise 1"
  questions:
  - text: "What should be written to the stack?"
    single: true
    options:
    - '0x100300, then 0x100100, then 0x100100, then 0x100000, then "/bin/sh\0", then 0x2000000'
    - '0x100100, then 0x100300, then "/bin/sh\0", then 0x200000, then 0x100100, then 0x100000'
    - '0x100100, then "/bin/sh\0", then 0x100300, then 0x200000, then 0x100100, then 0x100000'
    - '0x100300, then "/bin/sh\0", then 0x100100, then 0x200000, then 0x100100, then 0x100000'
    - 'none of these'
- title: "using a leak (1)"
  questions:
  - text: "what address is most likely leaked by the above?"
    single: true
    options:
    - "the location of the Foo object allocated on the heap"
    - "the location of the first entry in Foo's VTable"
    - "the location of the first instruction of Foo::Foo() (Foo's compiler-generated constructor)"
    - "the location of the stack pointer"
- title: "using a leak (2)"
  questions:
  - text: "what information can we probably compute?"
    multiple: true
    options:
    - "stack pointer"
    - "Foo::bar's address"
    - "gadget from executable's address"
    - "gadget from C library's address"
    - "p's address"
    - "f's VTable's address"

